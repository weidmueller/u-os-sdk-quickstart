// Copyright 2023 Weidmueller Interface GmbH & Co. KG <oss@weidmueller.com>
//
// SPDX-License-Identifier: Apache-2.0

namespace weidmueller.ucontrol.devices;

union AnyRequest {
  GetVersionRequest,
  DeployRequest,
  GetDeviceStateRequest,
  ListDeviceStatesRequest,
  ListDevicesRequest,
  GetDeviceDiagAlarmRequest,
  AckDeviceDiagAlarmRequest,
  GetDeviceProcAlarmRequest,
  AckDeviceProcAlarmRequest,
  SetDeviceParameterRequest,
  GetDeviceParameterRequest
}

table Request {
  request:AnyRequest;
}

union AnyResponse {
  GetVersionResponse,
  DeployResponse,
  GetDeviceStateResponse,
  ListDeviceStatesResponse,
  ListDevicesResponse,
  GetDeviceDiagAlarmResponse,
  AckDeviceDiagAlarmResponse,
  GetDeviceProcAlarmResponse,
  AckDeviceProcAlarmResponse,
  SetDeviceParameterResponse,
  GetDeviceParameterResponse
}

enum Status : byte {
  Ok = 0,
  UnknownError = 1,
  InvalidRequest = 2
}

table Response {
  status:Status;
  response:AnyResponse;
}

union AnyMessage {
  Request,
  Response
}

table Device {
  // Device slot (0 ... 63)
  slot:uint8;

  // Device state
  // ERROR = 0x00000001
  // PENDING = 0x00000002
  // UNPLUGGED = 0x00000004
  // CONFIG ERROR = 0x00000008
  // DIAG ALARM = 0x00000010
  // PROC ALARM = 0x00000020
  state:uint32;

  id:uint32;
  name:string;
  serial_number:string;
  order_number:string;
  hardware_version:string;
  software_version:string;
  fpga_version:string;
  eeprom_version:string;
  calibration_date:string;
}

table GetVersionRequest {}

// Get the API version
table GetVersionResponse {
  version:string;
}

// Deploy the device configuration blob
table DeployRequest {
  data:[ubyte];
}

table DeployResponse {}

// Get state from device with 'name' e.g. slio or slio/0...n
table GetDeviceStateRequest {
  name:string;
}

table GetDeviceStateResponse {
  state:uint32;
}

// Get diagnostic alarm data from device with 'name' e.g. slio/0...n
table GetDeviceDiagAlarmRequest {
  name:string;
}

table GetDeviceDiagAlarmResponse {
  data:[ubyte];
}

// Acknowledge diagnostic alarm from device with 'name' e.g. slio/0...n
table AckDeviceDiagAlarmRequest {
  name:string;
}

table AckDeviceDiagAlarmResponse {}

// Get process alarm data from device with 'name' e.g. slio/0...n
table GetDeviceProcAlarmRequest {
  name:string;
}

table GetDeviceProcAlarmResponse {
  data:[ubyte];
}

// Acknowledge process alarm from device with 'name' e.g. slio/0...n
table AckDeviceProcAlarmRequest {
  name:string;
}

table AckDeviceProcAlarmResponse {}

// List states from devices under the device with 'name' e.g. slio
table ListDeviceStatesRequest {
  name:string;
}

table ListDeviceStatesResponse {
  states:[uint32];
}

// List devices under the device with 'name' e.g. slio
table ListDevicesRequest {
  name:string;
}

table ListDevicesResponse {
  devices:[Device];
}

// Set device parameters of device with 'name' e.g. slio/0...n
table SetDeviceParameterRequest {
  name:string;
  data:[ubyte];
}

table SetDeviceParameterResponse {}

// Get device parameters from device with 'name' e.g. slio/0...n
table GetDeviceParameterRequest {
  name:string;
}

table GetDeviceParameterResponse {
  data:[ubyte];
}

table Message {
  message:AnyMessage;
}

root_type Message;
